
Question 1:
// Your code here

p.then(value => console.log(value));

Question 2:
// Your code here
p.catch(error => console.log(error.message))

Question 3:
// Your code here

p.then(value => console.log(value));

Question 4:
// Your code here
const p = Promise.resolve({ id: 1, name: 'Alice' });

p.then(value => console.log(value.name));

Question 5:
// Your code here

p.catch(error => console.log(error));


Question 6:
// Your code here


p.finally(() => {
  console.log('promise has settled.');
});

Question 7:
// Your code here

p.then(value => {
  const doubledValue = value * 2;
  console.log(doubledValue);
});

Question 8:
// Your code here


p.catch(error => {
  console.log('Handling rejection:', error.message);
  return 0;  // Return a default value
}).then(value => {
  console.log('Final value:', value);  // Log the final value
});

Question 9:
// Your code here


Promise.all(promises)
  .then(results => {
    console.log(results);  // Log the array of resolved values
  })
  .catch(error => {
    console.log('Error:', error);  // Handle any rejection (if any)
  });

Question 10:
// Your code here
const promises = [
  new Promise(resolve => setTimeout(() => resolve('a'), 100)),
  new Promise(resolve => setTimeout(() => resolve('b'), 50)),
  new Promise(resolve => setTimeout(() => resolve('c'), 150))
];

Promise.race(promises)
  .then(value => {
    console.log(value);  // Logs the first resolved value
  })
  .catch(error => {
    console.log('Error:', error);  // Handles any rejection (if any)
  });

Bonus Question:
// Your code here
const p = Promise.resolve('World');

p.then((value) => {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve('Hello ' + value);
    }, 1000);
  });
}).then((finalValue) => {
  console.log(finalValue); // This will log 'Hello World' after 1 second.
});

